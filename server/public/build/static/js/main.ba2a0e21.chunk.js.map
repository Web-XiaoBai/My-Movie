{"version":3,"sources":["assets/no.jpg","services/CommonTypes.ts","redux/reducers/MovieReducer.ts","redux/reducers/index.ts","redux/store.ts","pages/Home.tsx","components/MovieTable.tsx","services/MovieService.ts","redux/actions/MovieAction.ts","pages/movie/MovieList.tsx","components/ImgUploader.tsx","components/MovieForm.tsx","pages/movie/AddMovie.tsx","pages/movie/EditMovie.tsx","pages/Layout.tsx","App.tsx","index.tsx"],"names":["module","exports","MovieSwitch","defaultState","data","total","condition","page","limit","key","isLoading","totalPage","setMovie","state","action","payload","movie","Math","ceil","setCondition","newState","setLoading","deleteMovie","filter","i","_id","checkedSwitch","find","d","id","newMovie","type","newVal","newData","map","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","logger","React","Component","MovieTable","this","props","onLoad","prop","style","padding","placeholder","value","width","marginBottom","display","onChange","e","onKeyChange","target","onPressEnter","onSearch","icon","size","onClick","marginRight","title","dataIndex","render","poster","className","src","alt","NoImg","filterDropdown","p","getFliterDropdown","filterIcon","types","join","areas","timing","isHot","record","checked","onChangeSwitch","isSoon","isClassic","to","onConfirm","a","async","onDelete","message","success","okText","cancelText","current","pageSize","rowKey","columns","getColums","dataSource","loading","pagination","handlePage","MovieService","axios","post","get","params","put","delete","setMovieAction","setConditionAction","setLoadingAction","deleteMovieAction","checkedSwitchAction","fetchMovies","dispatch","getState","curCondition","resp","checkedSwitchMovie","updata","connect","MovieAction","ImgUploader","isShow","uid","name","url","formData","FormData","append","filename","file","request","Request","method","body","fetch","then","json","error","listType","accept","fileList","getFileList","customRequest","handleRequest","bind","onRemove","onPreview","setState","getUploadContent","visible","footer","onCancel","AllAreas","label","AreasGroups","Checkbox","Group","AllTypes","TypesGroups","MovieForm","event","preventDefault","validateFields","form","err","values","onSumbit","res","history","push","getFieldDecorator","labelCol","span","wrapperCol","onSubmit","handleSubmit","Item","rules","required","options","min","step","initialValue","valuePropName","checkedChildren","unCheckedChildren","TextArea","offset","htmlType","withRouter","Form","create","mapPropsToFields","obj","createFormField","getDefaultField","add","handleSumbit","undefined","findById","match","Header","Layout","Sider","Content","LayoutComp","mode","theme","path","component","Home","exact","MovieList","AddMovie","EditMovie","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ba2a0e21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no.fa54d02e.jpg\";","export interface IResponseError {\r\n    error: string;\r\n    data: null;\r\n}\r\n\r\nexport interface IResponseData<T> {\r\n    error: null;\r\n    data: T;\r\n}\r\n\r\nexport interface IResponsePageData<T> {\r\n    total: number;\r\n    data: T[];\r\n    error: null;\r\n}\r\n\r\nexport interface ICondition {\r\n    page?: number;\r\n    limit?: number;\r\n    key?: string;\r\n}\r\n\r\nexport enum MovieSwitch {\r\n    isHot = 'isHot',\r\n    isSoon = 'isSoon',\r\n    isClassic = 'isClassic'\r\n}","import { IMovie } from \"../../services/MovieService\";\r\nimport { ICondition } from \"../../services/CommonTypes\";\r\nimport { MovieActions, SetMovieAction, SetConditionAction, SetLoadingAction, DeleteMovieAction, CheckedSwitchAction } from \"../actions/MovieAction\";\r\nimport { Reducer } from \"react\";\r\n\r\nexport type Condition = Required<ICondition>;\r\n\r\n/**\r\n * 仓库数据类型\r\n */\r\nexport interface IMovieState {\r\n    /**\r\n     * 电影数组\r\n     */\r\n    data: IMovie[];\r\n    /**\r\n     * 总数据量\r\n     */\r\n    total: number;\r\n    /**\r\n     * 查询条件\r\n     */\r\n    condition: Condition;\r\n    /**\r\n     * 是否正在加载\r\n     */\r\n    isLoading: boolean;\r\n    /**\r\n     * 页码总数\r\n     */\r\n    totalPage: number;\r\n}\r\n\r\n/**\r\n * 仓库默认数据\r\n */\r\nconst defaultState: IMovieState = {\r\n    data: [],\r\n    total: 0,\r\n    condition: {\r\n        page: 1,\r\n        limit: 10,\r\n        key: ''\r\n    },\r\n    isLoading: false,\r\n    totalPage: 0\r\n}\r\n\r\ntype MovieReducer<A> = Reducer<IMovieState, A>;\r\n\r\nconst setMovie: MovieReducer<SetMovieAction> = (state, action) => {\r\n    return {\r\n        ...state,\r\n        data: action.payload.movie,\r\n        total: action.payload.total,\r\n        totalPage: Math.ceil(action.payload.total / state.condition.limit)\r\n    }\r\n}\r\n\r\nconst setCondition: MovieReducer<SetConditionAction> = (state, action) => {\r\n    const newState = {\r\n        ...state,\r\n        condition: {\r\n            ...state.condition,\r\n            ...action.payload\r\n        }\r\n    }\r\n    newState.totalPage = Math.ceil(newState.total / newState.condition.limit);\r\n    return newState;\r\n}\r\n\r\nconst setLoading: MovieReducer<SetLoadingAction> = (state, action) => {\r\n    return {\r\n        ...state,\r\n        isLoading: action.payload\r\n    }\r\n}\r\n\r\nconst deleteMovie: MovieReducer<DeleteMovieAction> = (state, action) => {\r\n    const data = state.data.filter(i => i._id !== action.payload);\r\n    return {\r\n        ...state,\r\n        data,\r\n        total: state.total - 1,\r\n        totalPage: Math.ceil((state.total - 1) / state.condition.limit)\r\n    }\r\n}\r\n\r\nconst checkedSwitch: MovieReducer<CheckedSwitchAction> = (state, action) => {\r\n    // 找到对应ID的电影对象\r\n    const movie = state.data.find(d => d._id === action.payload.id);\r\n    if (!movie) return state;\r\n    // 克隆对象并更改类型\r\n    const newMovie = { ...movie };\r\n    newMovie[action.payload.type] = action.payload.newVal;\r\n    // 将新对象重新放入数组\r\n    const newData = state.data.map(d => {\r\n        if (d._id === action.payload.id) return newMovie;\r\n        else return d;\r\n    })\r\n    return {\r\n        ...state,\r\n        data: newData\r\n    }\r\n}\r\n\r\nexport default function (state: IMovieState = defaultState, action: MovieActions) {\r\n    switch (action.type) {\r\n        case '_setMovie':\r\n            return setMovie(state, action);\r\n        case '_setCondition':\r\n            return setCondition(state, action);\r\n        case '_setLoading':\r\n            return setLoading(state, action);\r\n        case '_deleteMovie':\r\n            return deleteMovie(state, action);\r\n        case '_checkedSwitch':\r\n            return checkedSwitch(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","// 合并reducer, 并生产一个唯一reducer\r\nimport { combineReducers } from 'redux';\r\nimport movie from './MovieReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    movie\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from './reducers';\r\nimport logger from 'redux-logger';\r\nimport { IMovieState } from './reducers/MovieReducer';\r\nimport  thunk, { ThunkMiddleware } from 'redux-thunk';\r\n\r\nexport interface IRootReducer {\r\n    movie: IMovieState\r\n}\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk as ThunkMiddleware<IRootReducer>, logger)\r\n);","import React from \"react\";\r\n\r\nexport default class extends React.Component {\r\n    render() {\r\n        return (\r\n            <h1>欢迎使用电影管理系统</h1>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { IMovieState } from '../redux/reducers/MovieReducer';\r\nimport { Table, Switch, Button, Popconfirm, message, Icon, Input } from 'antd';\r\nimport { ColumnProps, PaginationConfig } from 'antd/lib/table';\r\nimport { IMovie } from '../services/MovieService';\r\nimport NoImg from '../assets/no.jpg';\r\nimport { MovieSwitch } from '../services/CommonTypes';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport interface IMovieTableEvent {\r\n    onLoad(): void,\r\n    onChangeSwitch(type: MovieSwitch, newVal: boolean, id: string): void,\r\n    onDelete(id: string): Promise<void>\r\n    onChange(pagination: PaginationConfig): void\r\n    onKeyChange(key: string): void\r\n    onSearch(): void\r\n}\r\n\r\nexport default class MovieTable extends Component<IMovieState & IMovieTableEvent> {\r\n\r\n    componentDidMount() {\r\n        this.props.onLoad();\r\n    }\r\n\r\n    private getFliterDropdown(prop: Object) {\r\n        return (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    placeholder={'请输入电影名称'}\r\n                    value={this.props.condition.key}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                    onChange={e => this.props.onKeyChange(e.target.value)}\r\n                    onPressEnter={this.props.onSearch}\r\n                />\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon=\"search\"\r\n                    size=\"small\"\r\n                    onClick={this.props.onSearch}\r\n                    style={{ width: 90, marginRight: 8 }}\r\n                >\r\n                    搜索\r\n            </Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    style={{ width: 90 }}\r\n                    icon=\"redo\"\r\n                    onClick={\r\n                        () => {\r\n                            this.props.onKeyChange('');\r\n                            this.props.onSearch();\r\n                        }\r\n                    }\r\n                >\r\n                    重置\r\n            </Button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private getColums(): ColumnProps<IMovie>[] {\r\n        return [\r\n            {\r\n                title: '海报',\r\n                dataIndex: 'poster',\r\n                render(poster: string) {\r\n                    if (poster) {\r\n                        return <img className='poster' src={poster} alt='海报图' />\r\n                    } else {\r\n                        return <img className='poster' src={NoImg} alt='暂无图片' />\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                title: '电影名称',\r\n                dataIndex: 'name',\r\n                filterDropdown: p => this.getFliterDropdown(p),\r\n                filterIcon: <Icon type=\"search\" />\r\n            },\r\n            {\r\n                title: '类型',\r\n                dataIndex: 'types',\r\n                render(types: string[]) {\r\n                    return types.join('丨');\r\n                }\r\n            },\r\n            {\r\n                title: '地区',\r\n                dataIndex: 'areas',\r\n                render(areas: string[]) {\r\n                    return areas.join('丨');\r\n                }\r\n            },\r\n            {\r\n                title: '时长',\r\n                dataIndex: 'timing',\r\n                render(timing: string[]) {\r\n                    return timing + '分钟';\r\n                }\r\n            },\r\n            {\r\n                title: '正在热映',\r\n                dataIndex: 'isHot',\r\n                render: (isHot: boolean, record) => {\r\n                    return <Switch checked={isHot} onChange={\r\n                        checked => {\r\n                            this.props.onChangeSwitch(MovieSwitch.isHot, checked, record._id!);\r\n                        }\r\n                    } />\r\n                }\r\n            },\r\n            {\r\n                title: '即将上线',\r\n                dataIndex: 'isSoon',\r\n                render: (isSoon: boolean, record) => {\r\n                    return <Switch checked={isSoon} onChange={\r\n                        checked => {\r\n                            this.props.onChangeSwitch(MovieSwitch.isSoon, checked, record._id!);\r\n                        }\r\n                    } />\r\n                }\r\n            },\r\n            {\r\n                title: '经典影片',\r\n                dataIndex: 'isClassic',\r\n                render: (isClassic: boolean, record) => {\r\n                    return <Switch checked={isClassic} onChange={\r\n                        checked => {\r\n                            this.props.onChangeSwitch(MovieSwitch.isClassic, checked, record._id!);\r\n                        }\r\n                    } />\r\n                }\r\n            },\r\n            {\r\n                title: '操作',\r\n                dataIndex: '_id',\r\n                render: (id: string) => {\r\n                    return (\r\n                        <div>\r\n                            <NavLink to={'/movie/edit/' + id}>\r\n                                <Button size='small' type=\"primary\">编辑</Button>\r\n                            </NavLink>\r\n                            <Popconfirm\r\n                                title=\"您确定要删除此电影吗?\"\r\n                                onConfirm={async () => {\r\n                                    await this.props.onDelete(id);\r\n                                    message.success('删除成功');\r\n                                }}\r\n                                okText=\"确定\"\r\n                                cancelText=\"取消\"\r\n                            >\r\n                                <Button size='small' type=\"danger\">删除</Button>\r\n                            </Popconfirm>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n    private handlePage(): false | PaginationConfig {\r\n        if (this.props.total === 0) return false;\r\n        return {\r\n            current: this.props.condition.page,\r\n            pageSize: this.props.condition.limit,\r\n            total: this.props.total\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Table\r\n                rowKey='_id'\r\n                columns={this.getColums()}\r\n                dataSource={this.props.data}\r\n                loading={this.props.isLoading}\r\n                pagination={this.handlePage()}\r\n                onChange={(pagination) => {\r\n                    this.props.onChange(pagination);\r\n                }}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport { IResponseData, IResponseError, ICondition, IResponsePageData } from './CommonTypes';\r\n\r\nexport interface IMovie {\r\n    _id?: string;\r\n    name: string;\r\n    types: string[];\r\n    areas: string[];\r\n    timing: number;\r\n    isHot: boolean;\r\n    isSoon: boolean;\r\n    isClassic: boolean;\r\n    description?: string;\r\n    poster?: string;\r\n}\r\n\r\nexport class MovieService {\r\n    public static async add(movie: IMovie): Promise<IResponseData<IMovie> | IResponseError> {\r\n        const { data } = await axios.post('/api/movie', movie);\r\n        return data;\r\n    }\r\n\r\n    public static async findById(id: string): Promise<IResponseData<IMovie | null>> {\r\n        const { data } = await axios.get('/api/movie/' + id);\r\n        return data;\r\n    }\r\n\r\n    public static async find(condition?: ICondition): Promise<IResponsePageData<IMovie>> {\r\n        const { data } = await axios.get('/api/movie', { params: condition });\r\n        return data;\r\n    }\r\n\r\n    public static async updata(id: string, movie: Partial<IMovie>): Promise<IResponseData<true> | IResponseError> {\r\n        const { data } = await axios.put('/api/movie/' + id, movie);\r\n        return data;\r\n    }\r\n\r\n    public static async delete(id: string): Promise<IResponseData<true> | IResponseError> {\r\n        const { data } = await axios.delete('/api/movie/' + id);\r\n        return data;\r\n    }\r\n}","import { IMovie, MovieService } from \"../../services/MovieService\";\r\nimport { IAction } from \"./ActionTypes\";\r\nimport { ICondition, MovieSwitch } from \"../../services/CommonTypes\";\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { IRootReducer } from \"../store\";\r\n\r\n/**\r\n * 设置电影数组\r\n */\r\nexport type SetMovieAction = IAction<'_setMovie', {\r\n    movie: IMovie[];\r\n    total: number;\r\n}>;\r\nfunction setMovieAction(movie: IMovie[], total: number): SetMovieAction {\r\n    return {\r\n        type: '_setMovie',\r\n        payload: {\r\n            movie,\r\n            total\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * 设置查询条件\r\n */\r\nexport type SetConditionAction = IAction<'_setCondition', ICondition>;\r\nfunction setConditionAction(condition: ICondition): SetConditionAction {\r\n    return {\r\n        type: '_setCondition',\r\n        payload: condition\r\n    };\r\n};\r\n\r\n/**\r\n * 设置是否正在加载\r\n */\r\nexport type SetLoadingAction = IAction<'_setLoading', boolean>;\r\nfunction setLoadingAction(isLoading: boolean): SetLoadingAction {\r\n    return {\r\n        type: '_setLoading',\r\n        payload: isLoading\r\n    };\r\n};\r\n\r\n/**\r\n * 删除一个电影\r\n */\r\nexport type DeleteMovieAction = IAction<'_deleteMovie', string>;\r\nfunction deleteMovieAction(id: string): DeleteMovieAction {\r\n    return {\r\n        type: '_deleteMovie',\r\n        payload: id\r\n    };\r\n};\r\n\r\n/**\r\n * 更改开关状态\r\n */\r\nexport type CheckedSwitchAction = IAction<'_checkedSwitch', {\r\n    type: MovieSwitch\r\n    newVal:boolean\r\n    id: string\r\n}>;\r\nfunction checkedSwitchAction(type: MovieSwitch, newVal:boolean, id: string): CheckedSwitchAction {\r\n    return {\r\n        type: '_checkedSwitch',\r\n        payload: {\r\n            type,\r\n            newVal,\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nexport type MovieActions = SetMovieAction | SetConditionAction | SetLoadingAction | DeleteMovieAction | CheckedSwitchAction;\r\n\r\n// 副作用处理\r\n/**\r\n * 请求数据\r\n * @param condition 条件\r\n */\r\nfunction fetchMovies(condition: ICondition): ThunkAction<Promise<void>, IRootReducer, any, MovieActions> {\r\n    return async (dispatch, getState) => {\r\n        dispatch(setLoadingAction(true)); // 设置加载状态\r\n        dispatch(setConditionAction(condition)); // 设置条件状态\r\n        const curCondition = getState().movie.condition; // 获取条件状态\r\n        const resp = await MovieService.find(curCondition); // 获取服务器数据\r\n        dispatch(setMovieAction(resp.data, resp.total)); // 更改仓库数据\r\n        dispatch(setLoadingAction(false)); // 设置加载状态\r\n    }\r\n}\r\n\r\n/**\r\n * 根据ID删除数据\r\n * @param id \r\n */\r\nfunction deleteMovie(id: string): ThunkAction<Promise<void>, IRootReducer, any, MovieActions> {\r\n    return async dispatch => {\r\n        dispatch(setLoadingAction(true)); // 设置加载状态\r\n        await MovieService.delete(id); // 根据ID删除数据库数据\r\n        dispatch(deleteMovieAction(id)); // 根据ID删除仓库数据\r\n        dispatch(setLoadingAction(false)); // 设置加载状态\r\n    }\r\n}\r\n\r\nfunction checkedSwitchMovie(type: MovieSwitch, newVal:boolean, id: string): ThunkAction<Promise<void>, IRootReducer, any, MovieActions> {\r\n    return async dispatch => {\r\n        dispatch(setLoadingAction(true)); // 设置加载状态\r\n        await MovieService.updata(id, {\r\n            [type]: newVal\r\n        }) // 更新服务器数据\r\n        dispatch(checkedSwitchAction(type, newVal, id)); // 更改仓库数据\r\n        dispatch(setLoadingAction(false)); // 设置加载状态\r\n    }\r\n}\r\n\r\nexport default {\r\n    setMovieAction,\r\n    setConditionAction,\r\n    setLoadingAction,\r\n    deleteMovieAction,\r\n    fetchMovies,\r\n    deleteMovie,\r\n    checkedSwitchMovie\r\n};\r\n","import MovieTable, { IMovieTableEvent } from '../../components/MovieTable';\r\nimport { connect } from 'react-redux';\r\nimport { IRootReducer } from \"../../redux/store\";\r\nimport { Dispatch } from 'react';\r\nimport MovieAction from '../../redux/actions/MovieAction';\r\n\r\nfunction mapStoreToProps(store: IRootReducer) {\r\n    return store.movie;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<any>): IMovieTableEvent {\r\n    return {\r\n        onLoad() {\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: 1,\r\n                limit: 10,\r\n                key: ''\r\n            }))\r\n        },\r\n        onChangeSwitch(type, newVal, id) {\r\n            dispatch(MovieAction.checkedSwitchMovie(type, newVal, id));\r\n        },\r\n        async onDelete(id) {\r\n            await dispatch(MovieAction.deleteMovie(id));\r\n        },\r\n        onChange(pagination){\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: pagination.current\r\n            }))\r\n        },\r\n        onKeyChange(key){\r\n            dispatch(MovieAction.setConditionAction({\r\n                key\r\n            }))\r\n        },\r\n        onSearch(){\r\n            dispatch(MovieAction.fetchMovies({\r\n                page: 1\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStoreToProps, mapDispatchToProps)(MovieTable);","import React, { Component } from 'react'\r\nimport { Upload, Icon, message, Modal } from 'antd';\r\nimport { UploadFile } from 'antd/lib/upload/interface';\r\n\r\ninterface IImgUploaderProps {\r\n    value?: string\r\n    onChange?(imgUrl: string): void\r\n}\r\n\r\ninterface IState {\r\n    isShow: boolean\r\n}\r\n\r\nexport default class ImgUploader extends Component<IImgUploaderProps, IState> {\r\n\r\n    state: IState = {\r\n        isShow: false\r\n    }\r\n\r\n    private getUploadContent() {\r\n        if (this.props.value) {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Icon type=\"plus\" />\r\n                    <div>上传文件</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    private getFileList(): UploadFile[] {\r\n        if (this.props.value) {\r\n            return [\r\n                {\r\n                    uid: this.props.value,\r\n                    name: this.props.value,\r\n                    url: this.props.value,\r\n                }\r\n            ]\r\n        }\r\n        return [];\r\n    }\r\n\r\n    async handleRequest(p: any) {\r\n        let formData = new FormData(); // 创建一个表单对象\r\n        formData.append(p.filename, p.file); // 插入图片数据\r\n\r\n        const request = new Request(p.action, {\r\n            method: 'post',\r\n            body: formData\r\n        });\r\n        const resp = await fetch(request).then(resp => resp.json());\r\n        if (resp.error) {\r\n            message.error('上传失败！');\r\n        } else {\r\n            this.props.onChange && this.props.onChange(resp.data);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Upload\r\n                    name=\"imgfile\"\r\n                    listType=\"picture-card\"\r\n                    accept=\".jpg,.png,.gif\"\r\n                    action=\"/api/upload\"\r\n                    fileList={this.getFileList()}\r\n                    customRequest={this.handleRequest.bind(this)}\r\n                    onRemove={() => this.props.onChange && this.props.onChange('')}\r\n                    onPreview={() => {\r\n                        this.setState({\r\n                            isShow: true\r\n                        })\r\n                    }}\r\n                >\r\n                    {this.getUploadContent()}\r\n                </Upload>\r\n                <Modal\r\n                visible={this.state.isShow}\r\n                footer={null}\r\n                onCancel={\r\n                    () => {\r\n                        this.setState({\r\n                            isShow: false\r\n                        })\r\n                    }\r\n                }>\r\n                    <img alt=\"example\" style={{ width: '100%' }} src={this.props.value} />\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Form, Input, Button, Checkbox, InputNumber, Switch, Icon, message } from 'antd';\r\nimport ImgUploader from './ImgUploader';\r\nimport { IMovie } from '../services/MovieService';\r\nimport { WrappedFormUtils } from 'antd/lib/form/Form';\r\nimport { withRouter, RouteComponentProps } from 'react-router';\r\n\r\ninterface IFormProps extends RouteComponentProps {\r\n    form: WrappedFormUtils\r\n    onSumbit: (movie: IMovie) => Promise<string>\r\n    movie?: IMovie\r\n}\r\n\r\nconst AllAreas: { label: string, value: string }[] = [\r\n    { label: '广州天河', value: '广州天河' },\r\n    { label: '广州越秀', value: '广州越秀' },\r\n    { label: '广州白云', value: '广州白云' },\r\n    { label: '广州番禺', value: '广州番禺' },\r\n    { label: '广州花都', value: '广州花都' },\r\n];\r\n\r\nconst AreasGroups = Checkbox.Group;\r\n\r\nconst AllTypes: { label: string, value: string }[] = [\r\n    { label: '喜剧', value: '喜剧' },\r\n    { label: '科幻', value: '科幻' },\r\n    { label: '恐怖', value: '恐怖' },\r\n    { label: '惊悚', value: '惊悚' },\r\n    { label: '灾难', value: '灾难' },\r\n    { label: '动作', value: '动作' },\r\n    { label: '爱情', value: '爱情' },\r\n];\r\n\r\nconst TypesGroups = Checkbox.Group;\r\n\r\nclass MovieForm extends Component<IFormProps> {\r\n\r\n    handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault(); // 阻止默认事件\r\n        const { validateFields } = this.props.form;\r\n        validateFields(async (err, values: IMovie) => {\r\n            if (!err) {\r\n                // 表单验证成功\r\n                const res = await this.props.onSumbit(values);\r\n                if (res) {\r\n                    message.error(res);\r\n                } else {\r\n                    message.success('提交成功', 1, () => {\r\n                        // 跳转页面\r\n                        this.props.history.push('/movie');\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                span: 5\r\n            },\r\n            wrapperCol: {\r\n                span: 19\r\n            }\r\n        }\r\n\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                span: 19,\r\n                offset: 5\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Form {...formItemLayout} style={{ \"width\": \"500px\" }} onSubmit={this.handleSubmit.bind(this)}>\r\n                <Form.Item label=\"电影名称\">\r\n                    {getFieldDecorator<IMovie>('name', {\r\n                        rules: [{ required: true, message: \"电影名称不能为空\" }]\r\n                    }\r\n                    )(\r\n                        <Input />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"封面海报\">\r\n                    {getFieldDecorator<IMovie>('poster')(\r\n                        <ImgUploader />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"地区\">\r\n                    {getFieldDecorator<IMovie>('areas', {\r\n                        rules: [{ required: true, message: \"请选择上映地区\" }]\r\n                    }\r\n                    )(\r\n                        <AreasGroups options={AllAreas} />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"电影类型\">\r\n                    {getFieldDecorator<IMovie>('types', {\r\n                        rules: [{ required: true, message: \"请选择电影类型\" }]\r\n                    }\r\n                    )(\r\n                        <TypesGroups options={AllTypes} />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"电影时长(分)\">\r\n                    {getFieldDecorator<IMovie>('timing', {\r\n                        rules: [{ required: true, message: \"请输入电影时长\" }]\r\n                    })(\r\n                        <InputNumber min={1} step={10} />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"正在热映\">\r\n                    {getFieldDecorator<IMovie>('isHot', {\r\n                        initialValue: false,\r\n                        valuePropName: 'checked'\r\n                    })(\r\n                        <Switch\r\n                            checkedChildren={<Icon type=\"check\" />}\r\n                            unCheckedChildren={<Icon type=\"close\" />}\r\n                        />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"即将上映\">\r\n                    {getFieldDecorator<IMovie>('isSoon', {\r\n                        initialValue: false,\r\n                        valuePropName: 'checked'\r\n                    })(\r\n                        <Switch\r\n                            checkedChildren={<Icon type=\"check\" />}\r\n                            unCheckedChildren={<Icon type=\"close\" />}\r\n                        />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"经典影片\">\r\n                    {getFieldDecorator<IMovie>('isClassic', {\r\n                        initialValue: false,\r\n                        valuePropName: 'checked'\r\n                    })(\r\n                        <Switch\r\n                            checkedChildren={<Icon type=\"check\" />}\r\n                            unCheckedChildren={<Icon type=\"close\" />}\r\n                        />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"影片描述\">\r\n                    {getFieldDecorator<IMovie>('description')(\r\n                        <Input.TextArea />\r\n                    )}\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailFormItemLayout} label=\"\">\r\n                    <Button type='primary' htmlType=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\ntype MovieFields = {\r\n    [P in Exclude<keyof IMovie, '_id'>]: any\r\n}\r\n\r\n/**\r\n * 映射默认属性\r\n */\r\nfunction getDefaultField(movie: IMovie): MovieFields {\r\n    const obj: any = {};\r\n    for (const key in movie) {\r\n        obj[key] = Form.createFormField({\r\n            value: movie[key]\r\n        })\r\n    }\r\n    return obj;\r\n}\r\n\r\nexport default withRouter(Form.create<IFormProps>({\r\n    mapPropsToFields(props) {\r\n        if (props.movie) {\r\n            return getDefaultField(props.movie);\r\n        }\r\n    }\r\n})(MovieForm));","import React from \"react\";\r\nimport MovieForm from \"../../components/MovieForm\";\r\nimport { IMovie, MovieService } from \"../../services/MovieService\";\r\nimport { IResponseError, IResponseData } from \"../../services/CommonTypes\";\r\n\r\nexport default class extends React.Component {\r\n    async handleSumbit(movie: IMovie){\r\n        const res:IResponseError | IResponseData<IMovie> = await MovieService.add(movie);\r\n        if(res.error){\r\n            return res.error\r\n        }else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MovieForm onSumbit={this.handleSumbit}/>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { IMovie, MovieService } from \"../../services/MovieService\";\r\nimport { IResponseError, IResponseData } from \"../../services/CommonTypes\";\r\nimport MovieForm from \"../../components/MovieForm\";\r\n\r\ninterface IParams {\r\n    id: string\r\n}\r\n\r\ninterface EditFormData {\r\n    movie?: IMovie\r\n}\r\n\r\nexport default class extends React.Component<RouteComponentProps<IParams>, EditFormData> {\r\n\r\n    state: EditFormData = {\r\n        movie: undefined\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const res:IResponseData<IMovie | null> = await MovieService.findById(this.props.match.params.id);\r\n        if(res.data){\r\n            this.setState({\r\n                movie: res.data\r\n            })\r\n        }\r\n    }\r\n\r\n    async handleSumbit(movie: IMovie){\r\n        const res:IResponseError | IResponseData<true> = await MovieService.updata(this.props.match.params.id, movie);\r\n        if(res.error){\r\n            return res.error\r\n        }else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MovieForm \r\n            onSumbit={this.handleSumbit.bind(this)}\r\n            movie={this.state.movie}\r\n            />\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport { NavLink, Route } from \"react-router-dom\";\r\nimport Home from './Home';\r\nimport MovieList from './movie/MovieList';\r\nimport AddMovie from './movie/AddMovie';\r\nimport EditMovie from './movie/EditMovie';\r\nimport { Layout, Menu } from 'antd';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nexport const LayoutComp: React.FC = function () {\r\n    return (\r\n        <div className='container'>\r\n            <Layout>\r\n                <Header className='header'>\r\n                    <NavLink to='/'>猫眼电影管理系统</NavLink>\r\n                </Header>\r\n                <Layout>\r\n                    <Sider>\r\n                        <Menu\r\n                            mode=\"inline\"\r\n                            theme=\"dark\"\r\n                        >\r\n                            <Menu.Item key=\"1\">\r\n                                <NavLink to='/movie'>电影列表</NavLink>\r\n                            </Menu.Item>\r\n                            <Menu.Item key=\"2\">\r\n                                <NavLink to='/movie/add'>添加电影</NavLink>\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </Sider>\r\n                    <Content className='content'>\r\n                        <div>\r\n                            <Route path='/' component={Home} exact={true} />\r\n                            <Route path='/movie' component={MovieList} exact={true} />\r\n                            <Route path='/movie/add' component={AddMovie} />\r\n                            <Route path='/movie/edit/:id' component={EditMovie} />\r\n                        </div>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { LayoutComp } from './pages/Layout';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Route path='/' component={LayoutComp}></Route>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}